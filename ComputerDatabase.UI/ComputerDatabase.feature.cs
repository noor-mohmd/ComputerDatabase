// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ComputerDatabase.UI
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ComputerDatabase")]
    public partial class ComputerDatabaseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ComputerDatabase.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ComputerDatabase", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Computer Library")]
        [NUnit.Framework.TestCaseAttribute("Mainframe", "", "", "", "Mainframe", "", "", "Canon", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Sparc", "1998-12-28", "", "", "Sparc", "1999-12-18", "", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("PowerPC", "1998-12-28", "", "Sun Microsystems", "PowerPC", "1998-12-28", "2011-01-14", "Nokia", new string[0])]
        [NUnit.Framework.TestCaseAttribute("ServerMachine", "", "2000-11-13", "Sony", "NewServerMachine", "1989-05-09", "2000-11-13", "", new string[0])]
        [NUnit.Framework.TestCaseAttribute("AS400", "2000-10-16", "2010-06-20", "IBM", "AS(&400)", "2000-10-16", "", "Apple Inc.", new string[0])]
        public virtual void ComputerLibrary(string computerName, string introducedDate, string discontinuedDate, string company, string newComputerName, string newIntroducedDate, string newDiscontinuedDate, string newCompany, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Computer Library", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("the user is on home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Computer Name",
                        "Introduced date",
                        "Discontinued date",
                        "Company"});
            table1.AddRow(new string[] {
                        string.Format("{0}", computerName),
                        string.Format("{0}", introducedDate),
                        string.Format("{0}", discontinuedDate),
                        string.Format("{0}", company)});
#line 7
 testRunner.When("the user adds a new computer with following data", ((string)(null)), table1, "When ");
#line 10
 testRunner.Then(string.Format("the computer should be added with name \'{0}\'", computerName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "New Computer Name",
                        "New Introduced date",
                        "New Discontinued date",
                        "New Company",
                        "Computer Name",
                        "Introduced date",
                        "Discontinued date",
                        "Company"});
            table2.AddRow(new string[] {
                        string.Format("{0}", newComputerName),
                        string.Format("{0}", newIntroducedDate),
                        string.Format("{0}", newDiscontinuedDate),
                        string.Format("{0}", newCompany),
                        string.Format("{0}", computerName),
                        string.Format("{0}", introducedDate),
                        string.Format("{0}", discontinuedDate),
                        string.Format("{0}", company)});
#line 12
 testRunner.And("the user updates existing computer with following data", ((string)(null)), table2, "And ");
#line 15
 testRunner.Then(string.Format("the computer should be updated with name \'{0}\'", newComputerName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("the user deletes the computer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.Then(string.Format("the computer should be deleted with name \'{0}\'", newComputerName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Computer Not added")]
        [NUnit.Framework.TestCaseAttribute("", "1998-12-28", "2010-06-20", "Nokia", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Mainframe", "2019-02-29", "2020-01-10", "Canon", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Mainframe", "", "2019-06-31", "", "3", new string[0])]
        public virtual void ComputerNotAdded(string computerName, string introducedDate, string discontinuedDate, string company, string errorOnField, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Computer Not added", exampleTags);
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
 testRunner.Given("the user is on home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Computer Name",
                        "Introduced date",
                        "Discontinued date",
                        "Company",
                        "ErrorOnField"});
            table3.AddRow(new string[] {
                        string.Format("{0}", computerName),
                        string.Format("{0}", introducedDate),
                        string.Format("{0}", discontinuedDate),
                        string.Format("{0}", company),
                        string.Format("{0}", errorOnField)});
#line 29
 testRunner.When("the user tries to add a new computer with following data", ((string)(null)), table3, "When ");
#line 32
 testRunner.Then("the computer should not be added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
